"""
Analytics function to join 2 sets of values and sum the results before converting into a % distribution.
e.g. client 0 provides identifier, lookupvalue; client 1 provides identifier, amount.
     result is sum(amount) by lookupvalue as a %.
"""

from Compiler.types import Array, Matrix, sint, regint, sfix, cfix, MemValue, ClientMessageType
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import do_while, if_, if_e, else_, print_ln, for_range
from Compiler.util import if_else

PORTNUM = 14000
NUM_CLIENTS = 2
# Order of public keys will be used to force order of client connections
# Here want lookup data first so order is important.
CLIENT_PUBLIC_KEYS = [
    '242584f87e218f54299bfd1ecef97884f715f14305a5d05f78afb9bb92c7bc54',
    '0ae03219cce4cfaaa30d014b92b41a106ff6dd039f0040504d02f18f1985d149'
]

LOOKUP_SIZE = 30
MAX_NUM_LOOKUP = LOOKUP_SIZE * 2 + 2

BATCH_SIZE = 50
MAX_NUM_INPUTS = BATCH_SIZE * 2 + 2

program.set_bit_length(32)


def reformat_public_key(key_hex):
    """Convert authorised public key from hex string into list of 8 signed 32 bit ints,
       ready for later validation."""
    public_key_list = [key_hex[i:i + 8] for i in range(0, len(key_hex), 8)]

    def hex_to_signed(hex_int):
        """Convert hex byte into signed int"""
        int_val = int(hex_int, 16)
        if int_val > 0x7FFFFFFF:
            int_val -= 0x100000000
        return int_val

    return map(hex_to_signed, public_key_list)


def validate_client_connection(public_key, valid_public_key_list):
    """Compare public_key against the list of valid keys.
       Return position in list or -1 if not valid."""

    def validate_public_key(test_key, valid_key):
        """Compare each int of test_key against valid_key.
           Returns 1 if valid, else 0."""

        validation_count = 0

        for index, keypart in enumerate(test_key):
            matches = keypart == valid_key[index]
            validation_count += if_else(matches, 1, 0)

        return validation_count == 8

    client_posn = -1
    for index, valid_public_key in enumerate(valid_public_key_list):
        valid = validate_public_key(public_key, valid_public_key)
        client_posn = if_else(valid == 1, index, client_posn)

    return client_posn


def connectClients():
    """Wait until 2 valid (based on public key) clients have connected."""
    client_sockets = Array(NUM_CLIENTS, regint)
    number_clients = MemValue(regint(0))

    valid_public_key_list = [
        reformat_public_key(key_string) for key_string in CLIENT_PUBLIC_KEYS
    ]

    @do_while
    def client_connection():
        """Wait for a client to connect, validate key and put into correct slot."""
        client_socket_id = regint()
        print_ln('Waiting for client connection...')
        acceptclientconnection(client_socket_id, PORTNUM)
        public_key = regint.read_client_public_key(client_socket_id)

        # Order of clients connecting must be the same across SPDZ engines, or share distribution fails.
        client_posn = validate_client_connection(public_key,
                                                 valid_public_key_list)

        @if_e(client_posn < 0)
        def invalid_client():
            print_ln('Validation of connecting client public key failed.')

        @else_
        def valid_client():
            client_sockets[client_posn] = client_socket_id

            number_clients.write(number_clients + 1)
            print_ln(
                'Validation of connecting client public key succeeded, client order is %s, client count is %s.',
                client_posn, number_clients)

        return number_clients < NUM_CLIENTS

    return client_sockets


def store_lookup(input_count, inputs, lookup):
    """Store the inputs into the lookup structure, only storing valid inputs"""

    # Transfer inputs into an Array structure
    #  or compiler complains 'list indices must be integers, not regint'
    #  don't understand why this is not also needed in lookup_accumulate_inputs
    input_array = Array(LOOKUP_SIZE * 2, sint)
    for i, inp_value in enumerate(inputs):
        input_array[i] = inp_value

    @for_range(LOOKUP_SIZE)
    def loop_body(j):
        # is it a valid entry or to be ignored
        is_valid = (j * 2 + 1) < input_count
        lookup[j][0] = if_else(is_valid, input_array[j * 2], lookup[j][0])
        lookup[j][1] = if_else(is_valid, input_array[j * 2 + 1], lookup[j][1])


def lookup_accumulate_inputs(input_count, inputs, lookup, accumulator,
                             total_count):
    for j in range(0, BATCH_SIZE):

        # is it a valid entry or to be ignored
        is_valid = (j * 2 + 1) < input_count

        @if_(is_valid.reveal() == 1)
        def valid_input():
            lookup_id = Array(1, sint)
            lookup_id[0] = sint(-1)

            @for_range(LOOKUP_SIZE)
            def lookup_for_id(k):
                """Find id in lookup_data where lookup value matches"""
                is_match = inputs[j * 2] == lookup[k][0]
                lookup_id[0] = if_else(is_match, lookup[k][1], lookup_id[0])

            matchIndex = Array(1, sint)
            matchIndex[0] = sint(-1)
            emptyIndex = Array(1, sint)
            emptyIndex[0] = sint(-1)

            @for_range(LOOKUP_SIZE + 1)
            def update_or_insert(l):
                """Work out if this is an update or an insert"""
                is_match = accumulator[l][0] == lookup_id[0]
                matchIndex[0] = if_else(is_match, l, matchIndex[0])
                is_empty = accumulator[l][0] == sint(0)
                emptyIndex[0] = if_else(is_empty, l, emptyIndex[0])

            match_index = regint(matchIndex[0].reveal())
            insert_index = regint(emptyIndex[0].reveal())

            @if_e(match_index >= 0)
            def add_to_existing():
                accumulator[match_index][1] += inputs[j * 2 + 1]

            @else_
            def new_entry():
                @if_e(insert_index >= 0)
                def insert_at_end():
                    accumulator[insert_index][0] = lookup_id[0]
                    accumulator[insert_index][1] = inputs[j * 2 + 1]

                @else_
                def accumulate_problem():
                    print_ln(
                        'Can not accumulate to existing or insert at end.')

            total_count.write(total_count + inputs[j * 2 + 1])


def main():

    listen(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    client_sockets = connectClients()

    sfix.set_precision(20, 40)
    cfix.set_precision(20, 40)

    print_ln('Starting sum by lookup calculation.')

    # Lookup data from client 0, identifier, lookup value
    lookup_data = Matrix(LOOKUP_SIZE, 2, sint)
    lookup_data.assign_all(0)

    # Accumulated client 1 input - store lookup value, amount
    # + 1 for storing unmatched lookups in last posn
    accumulator = Matrix(LOOKUP_SIZE + 1, 2, sint)
    accumulator.assign_all(0)

    total_count = MemValue(sint(0))

    # First client provides lookup data
    # Block on user input, i.e. don't send shares until client requests.
    shareCount = regint.read_from_socket(client_sockets[0])
    print_ln('Lookup, requested %s shares.', shareCount)

    lookup_input = sint.receive_from_client(MAX_NUM_LOOKUP, client_sockets[0],
                                            ClientMessageType.TripleShares)

    store_lookup(lookup_input[0], lookup_input[1:-1], lookup_data)

    # Second client provides batched input
    @do_while
    def batch_input():
        # Block on user input, i.e. don't send shares until client requests.
        shareCount = regint.read_from_socket(client_sockets[1])
        print_ln('Input, requested %s shares.', shareCount)

        inputs = sint.receive_from_client(MAX_NUM_INPUTS, client_sockets[1],
                                          ClientMessageType.TripleShares)

        lookup_accumulate_inputs(inputs[0], inputs[1:-1], lookup_data,
                                 accumulator, total_count)

        return inputs[MAX_NUM_INPUTS - 1].reveal() == 0

    # populate index_percent as results (sint -> sfix, division, sfix -> cfix)
    total_count_sfix = sfix()
    total_count_sfix.load_int(total_count)

    index_percent = Array(LOOKUP_SIZE * 2 + 2, cfix)

    for i in range(LOOKUP_SIZE + 1):
        # can't load_int into cfix in an Array
        index_cfix = cfix()
        index_cfix.load_int(accumulator[i][0].reveal())
        index_percent[i * 2] = index_cfix

        count_sfix = sfix()
        count_sfix.load_int(accumulator[i][1])
        index_percent[i * 2 + 1] = (count_sfix / total_count_sfix).reveal()

        # here for debug
        print_ln('Results entry %s: index %s % div %s.', i,
                 index_percent[i * 2], index_percent[i * 2 + 1])

    for i in range(NUM_CLIENTS):
        cfix.write_to_socket(client_sockets[i], index_percent,
                             ClientMessageType.ClearModpFix)


main()

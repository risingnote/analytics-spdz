"""
First, simple standalone analytics function to calculate average from 2 client inputs.
"""

from Compiler.types import Array, sint, regint, sfix, cfix, MemValue, ClientMessageType
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import do_while, if_e, else_, print_ln
from Compiler.util import if_else

PORTNUM = 14000
NUM_CLIENTS = 2
# Order of public keys will be used to force order of client connections
CLIENT_PUBLIC_KEYS = [
    '0ae03219cce4cfaaa30d014b92b41a106ff6dd039f0040504d02f18f1985d149',
    '242584f87e218f54299bfd1ecef97884f715f14305a5d05f78afb9bb92c7bc54'
]
#inputs, input 1, input2, continue (0) or stop(1) value.
MAX_NUM_INPUTS = 4

program.set_bit_length(32)


def reformat_public_key(key_hex):
    """Convert authorised public key from hex string into list of 8 signed 32 bit ints,
       ready for later validation."""
    public_key_list = [key_hex[i:i + 8] for i in range(0, len(key_hex), 8)]

    def hex_to_signed(hex_int):
        """Convert hex byte into signed int"""
        int_val = int(hex_int, 16)
        if int_val > 0x7FFFFFFF:
            int_val -= 0x100000000
        return int_val

    return map(hex_to_signed, public_key_list)


def validate_client_connection(public_key, valid_public_key_list):
    """Compare public_key against the list of valid keys.
       Return position in list or -1 if not valid."""

    def validate_public_key(test_key, valid_key):
        """Compare each int of test_key against valid_key.
           Returns 1 if valid, else 0."""

        validation_count = 0

        for index, keypart in enumerate(test_key):
            matches = keypart == valid_key[index]
            validation_count += if_else(matches, 1, 0)

        return validation_count == 8

    client_posn = -1
    for index, valid_public_key in enumerate(valid_public_key_list):
        valid = validate_public_key(public_key, valid_public_key)
        client_posn = if_else(valid == 1, index, client_posn)

    return client_posn


def connectClients():
    """Wait until 2 valid (based on public key) clients have connected."""
    client_sockets = Array(NUM_CLIENTS, regint)
    number_clients = MemValue(regint(0))

    valid_public_key_list = [
        reformat_public_key(key_string) for key_string in CLIENT_PUBLIC_KEYS
    ]

    @do_while
    def client_connection():
        """Wait for a client to connect, validate key and put into correct slot."""
        client_socket_id = regint()
        print_ln('Waiting for client connection...')
        acceptclientconnection(client_socket_id, PORTNUM)
        public_key = regint.read_client_public_key(client_socket_id)

        # Order of clients connecting must be the same across SPDZ engines, or share distribution fails.
        client_posn = validate_client_connection(public_key,
                                                 valid_public_key_list)

        @if_e(client_posn < 0)
        def invalid_client():
            print_ln('Validation of connecting client public key failed.')

        @else_
        def valid_client():
            client_sockets[client_posn] = client_socket_id

            number_clients.write(number_clients + 1)
            print_ln(
                'Validation of connecting client public key succeeded, client order is %s, client count is %s.',
                client_posn, number_clients)

        return number_clients < NUM_CLIENTS

    return client_sockets


def main():

    listen(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    client_sockets = connectClients()

    sfix.set_precision(20, 40)
    cfix.set_precision(20, 40)

    print_ln('Starting avg calculation.')

    # Clients secret input - sum and cnt.
    accumulator = Array(2, sint)
    accumulator.assign_all(0)

    for i in range(NUM_CLIENTS):

        @do_while
        def batch_input():
            shareCount = regint.read_from_socket(client_sockets[i])
            print_ln('Requested %s shares.', shareCount)

            input_share = sint.receive_from_client(
                MAX_NUM_INPUTS, client_sockets[i],
                ClientMessageType.TripleShares)

            print_ln('Batch input count %s', input_share[0].reveal())

            accumulator[0] = accumulator[0] + input_share[1]
            accumulator[1] = accumulator[1] + input_share[2]

            print_ln('Current total %s count %s from clients.',
                     accumulator[0].reveal(), accumulator[1].reveal())

            return input_share[MAX_NUM_INPUTS - 1].reveal() == 0

    # do calc
    sum_float = sfix()
    sum_float.load_int(accumulator[0])
    cnt_float = sfix()
    cnt_float.load_int(accumulator[1])

    results = Array(1, cfix)
    sresult = sum_float / cnt_float
    results[0] = sresult.reveal()

    print_ln('Total %s, count %s, avg %s.',
             sum_float.reveal(), cnt_float.reveal(), results[0])

    for i in range(NUM_CLIENTS):
        cfix.write_to_socket(client_sockets[i], results,
                             ClientMessageType.ClearModpFix)


main()
